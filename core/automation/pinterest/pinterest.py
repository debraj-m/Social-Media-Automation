import os
import requests
import logging
from pathlib import Path
from typing import Optional
from core.auth.pinterest.oauth import PinterestOAuthClient
from core.image_generation.generator import ImageGenerator

class PinterestAutomation:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        
        # Initialize OAuth client
        self.oauth_client = PinterestOAuthClient(
            app_id=os.getenv('PINTEREST_APP_ID'),
            app_secret=os.getenv('PINTEREST_APP_SECRET'),
            redirect_uri=os.getenv('PINTEREST_REDIRECT_URI', 'http://localhost:8000/')
        )
        
        # Set API base URL based on environment
        self.is_sandbox = os.getenv('PINTEREST_ENV', '').lower() == 'sandbox'
        self.api_base = "https://api-sandbox.pinterest.com/v5" if self.is_sandbox else "https://api.pinterest.com/v5"
        self.board_id = os.getenv('PINTEREST_BOARD_ID')

    def _get_headers(self) -> dict:
        """Get headers with current access token"""
        token = self.oauth_client.get_access_token()
        return {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Accept": "application/json"
        }

    def create_board(self, name: str, description: str = "") -> Optional[str]:
        """Create a new Pinterest board and return its ID"""
        try:
            endpoint = f"{self.api_base}/boards"
            data = {
                "name": name,
                "description": description,
                "privacy": "PUBLIC"
            }

            response = requests.post(
                endpoint,
                headers=self._get_headers(),
                json=data
            )

            print(f"[DEBUG] Board creation response: {response.status_code} {response.text}")

            if response.status_code == 201:
                board_data = response.json()
                board_id = board_data.get("id")
                if board_id:
                    self.logger.info(f"Board created successfully with ID: {board_id}")
                    # Update the board_id in environment
                    self.board_id = board_id
                    return board_id
            
            self.logger.error(f"Failed to create board: {response.status_code} {response.text}")
            return None

        except Exception as e:
            self.logger.error(f"Error creating board: {str(e)}")
            return None

    def get_or_create_board(self, name: str = "AI Marketing Suite", description: str = "Content generated by AI Marketing Suite") -> Optional[str]:
        """Get existing board or create a new one"""
        try:
            # First try to get existing boards
            endpoint = f"{self.api_base}/boards"
            response = requests.get(
                endpoint,
                headers=self._get_headers()
            )

            if response.status_code == 200:
                boards = response.json().get("items", [])
                # Look for our board
                for board in boards:
                    if board.get("name") == name:
                        board_id = board.get("id")
                        self.logger.info(f"Found existing board with ID: {board_id}")
                        self.board_id = board_id
                        return board_id

            # If we didn't find the board, create it
            return self.create_board(name, description)

        except Exception as e:
            self.logger.error(f"Error getting/creating board: {str(e)}")
            return None

    def create_pin(self, title: str, description: str, image_data: Optional[bytes] = None, link: Optional[str] = None) -> bool:
        """Create a new pin with an image and optional link"""
        try:
            # Ensure we have a board
            if not self.board_id:
                self.board_id = self.get_or_create_board()
                if not self.board_id:
                    raise ValueError("Could not get or create Pinterest board")

            # Truncate title and description to Pinterest limits
            title = title[:100] if title else "AI Generated Content"
            description = description[:500] if description else "Content generated by AI Marketing Suite"

            if not image_data:
                self.logger.error("No image data provided")
                return False

            # Upload image bytes to Cloudinary
            image_url = self.upload_image_bytes_to_cloudinary(image_data)
            if not image_url:
                self.logger.error("Failed to upload image to Cloudinary")
                return False

            # Create the pin with the image URL
            endpoint = f"{self.api_base}/pins"
            data = {
                "title": title,
                "description": description,
                "board_id": self.board_id,
                "media_source": {
                    "source_type": "image_url",
                    "url": image_url
                }
            }
            
            if link:
                data["link"] = link

            print(f"[DEBUG] Creating pin with data: {data}")
            response = requests.post(
                endpoint,
                headers=self._get_headers(),
                json=data
            )

            print(f"[DEBUG] Pin creation response: {response.status_code} {response.text}")

            if response.status_code == 201:
                self.logger.info("Pin created successfully!")
                return True
            else:
                self.logger.error(f"Failed to create pin: {response.status_code} {response.text}")
                return False

        except Exception as e:
            self.logger.error(f"Error creating pin: {str(e)}")
            return False

    def get_boards(self) -> Optional[list]:
        """Get user's boards"""
        try:
            response = requests.get(
                f"{self.api_base}/boards",
                headers=self._get_headers()
            )
            
            if response.status_code == 200:
                boards = response.json().get('items', [])
                self.logger.info(f"Retrieved {len(boards)} boards")
                return boards
            else:
                self.logger.error(f"Failed to get boards: {response.status_code} {response.text}")
                return None
                
        except Exception as e:
            self.logger.error(f"Error getting boards: {str(e)}")
            return None

    def upload_image_bytes_to_cloudinary(self, image_data: bytes) -> Optional[str]:
        """Upload image bytes to Cloudinary and return the public URL."""
        import hashlib
        import time
        
        CLOUDINARY_CLOUD_NAME = os.environ.get("CLOUDINARY_CLOUD_NAME")
        CLOUDINARY_API_KEY = os.environ.get("CLOUDINARY_API_KEY")
        CLOUDINARY_API_SECRET = os.environ.get("CLOUDINARY_API_SECRET")
        
        if not (CLOUDINARY_CLOUD_NAME and CLOUDINARY_API_KEY and CLOUDINARY_API_SECRET):
            self.logger.error("Cloudinary credentials not set in environment")
            return None
            
        url = f"https://api.cloudinary.com/v1_1/{CLOUDINARY_CLOUD_NAME}/image/upload"
        timestamp = int(time.time())
        
        # Cloudinary requires a signature: sha1('timestamp=TIMESTAMP' + API_SECRET)
        params_to_sign = f"timestamp={timestamp}"
        string_to_sign = f"{params_to_sign}{CLOUDINARY_API_SECRET}"
        signature = hashlib.sha1(string_to_sign.encode('utf-8')).hexdigest()
        
        data = {
            'api_key': CLOUDINARY_API_KEY,
            'timestamp': timestamp,
            'signature': signature
        }
        
        # Create file-like object from bytes
        import io
        files = {"file": ("image.png", io.BytesIO(image_data), "image/png")}
        
        try:
            response = requests.post(url, data=data, files=files)
            if response.status_code == 200:
                return response.json()["secure_url"]
            else:
                self.logger.error(f"Cloudinary upload failed: {response.status_code} {response.text}")
                return None
        except Exception as e:
            self.logger.error(f"Error uploading to Cloudinary: {str(e)}")
            return None

def post_to_pinterest(title: str, content: str, image_data: Optional[bytes] = None) -> bool:
    """Helper function to post to Pinterest with image data"""
    try:
        pinterest = PinterestAutomation()
        
        # First, ensure we have a board
        board_id = pinterest.get_or_create_board()
        if not board_id:
            print("❌ Could not get or create Pinterest board")
            return False
            
        print(f"✅ Using Pinterest board: {board_id}")
        
        # Create the pin with image data if provided
        success = pinterest.create_pin(
            title=title,
            description=content,
            image_data=image_data
        )
        
        if success:
            print("✅ Pin created successfully!")
        else:
            print("❌ Failed to create pin")
        
        return success
        
    except Exception as e:
        print(f"❌ Error in Pinterest automation: {str(e)}")
        return False
